
smartdoor.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000004a4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000096  00800060  000004a4  00000518  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000005ae  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000005e0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000070  00000000  00000000  0000061c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000f3f  00000000  00000000  0000068c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000739  00000000  00000000  000015cb  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000629  00000000  00000000  00001d04  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000100  00000000  00000000  00002330  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003d8  00000000  00000000  00002430  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000856  00000000  00000000  00002808  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000b8  00000000  00000000  0000305e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 ea       	ldi	r30, 0xA4	; 164
  68:	f4 e0       	ldi	r31, 0x04	; 4
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a6 3f       	cpi	r26, 0xF6	; 246
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 9f 01 	call	0x33e	; 0x33e <main>
  7a:	0c 94 50 02 	jmp	0x4a0	; 0x4a0 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <lcd_cmd>:

typedef unsigned char u8;

void lcd_cmd(u8 cmd)
{
	lcd_ctrl&=~(1<<rw);
  82:	95 b3       	in	r25, 0x15	; 21
  84:	9d 7f       	andi	r25, 0xFD	; 253
  86:	95 bb       	out	0x15, r25	; 21
	lcd_ctrl&=~(1<<rs);
  88:	95 b3       	in	r25, 0x15	; 21
  8a:	9e 7f       	andi	r25, 0xFE	; 254
  8c:	95 bb       	out	0x15, r25	; 21
	lcd_data=cmd;
  8e:	82 bb       	out	0x12, r24	; 18
	lcd_ctrl|=(1<<e);
  90:	85 b3       	in	r24, 0x15	; 21
  92:	84 60       	ori	r24, 0x04	; 4
  94:	85 bb       	out	0x15, r24	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  96:	8f ec       	ldi	r24, 0xCF	; 207
  98:	97 e0       	ldi	r25, 0x07	; 7
  9a:	01 97       	sbiw	r24, 0x01	; 1
  9c:	f1 f7       	brne	.-4      	; 0x9a <lcd_cmd+0x18>
  9e:	00 c0       	rjmp	.+0      	; 0xa0 <lcd_cmd+0x1e>
  a0:	00 00       	nop
	_delay_ms(1);
	lcd_ctrl&=~(1<<e);
  a2:	85 b3       	in	r24, 0x15	; 21
  a4:	8b 7f       	andi	r24, 0xFB	; 251
  a6:	85 bb       	out	0x15, r24	; 21
  a8:	08 95       	ret

000000aa <lcd_char>:
}

void lcd_char(u8 ch)
{
	lcd_ctrl&=~(1<<rw);
  aa:	95 b3       	in	r25, 0x15	; 21
  ac:	9d 7f       	andi	r25, 0xFD	; 253
  ae:	95 bb       	out	0x15, r25	; 21
	lcd_ctrl|=(1<<rs);
  b0:	95 b3       	in	r25, 0x15	; 21
  b2:	91 60       	ori	r25, 0x01	; 1
  b4:	95 bb       	out	0x15, r25	; 21
	lcd_data=ch;
  b6:	82 bb       	out	0x12, r24	; 18
	lcd_ctrl|=(1<<e);
  b8:	85 b3       	in	r24, 0x15	; 21
  ba:	84 60       	ori	r24, 0x04	; 4
  bc:	85 bb       	out	0x15, r24	; 21
  be:	8f ec       	ldi	r24, 0xCF	; 207
  c0:	97 e0       	ldi	r25, 0x07	; 7
  c2:	01 97       	sbiw	r24, 0x01	; 1
  c4:	f1 f7       	brne	.-4      	; 0xc2 <lcd_char+0x18>
  c6:	00 c0       	rjmp	.+0      	; 0xc8 <lcd_char+0x1e>
  c8:	00 00       	nop
	_delay_ms(1);
	lcd_ctrl&=~(1<<e);
  ca:	85 b3       	in	r24, 0x15	; 21
  cc:	8b 7f       	andi	r24, 0xFB	; 251
  ce:	85 bb       	out	0x15, r24	; 21
  d0:	08 95       	ret

000000d2 <lcd_str>:
}

void lcd_str(const char* str)
{
  d2:	0f 93       	push	r16
  d4:	1f 93       	push	r17
  d6:	cf 93       	push	r28
  d8:	df 93       	push	r29
  da:	8c 01       	movw	r16, r24
	for (int i=0;str[i] !='\0';i++)
  dc:	c0 e0       	ldi	r28, 0x00	; 0
  de:	d0 e0       	ldi	r29, 0x00	; 0
  e0:	0c c0       	rjmp	.+24     	; 0xfa <lcd_str+0x28>
	{
		lcd_char(str[i]);
  e2:	0e 94 55 00 	call	0xaa	; 0xaa <lcd_char>
  e6:	2f ef       	ldi	r18, 0xFF	; 255
  e8:	80 e7       	ldi	r24, 0x70	; 112
  ea:	92 e0       	ldi	r25, 0x02	; 2
  ec:	21 50       	subi	r18, 0x01	; 1
  ee:	80 40       	sbci	r24, 0x00	; 0
  f0:	90 40       	sbci	r25, 0x00	; 0
  f2:	e1 f7       	brne	.-8      	; 0xec <lcd_str+0x1a>
  f4:	00 c0       	rjmp	.+0      	; 0xf6 <lcd_str+0x24>
  f6:	00 00       	nop
	lcd_ctrl&=~(1<<e);
}

void lcd_str(const char* str)
{
	for (int i=0;str[i] !='\0';i++)
  f8:	21 96       	adiw	r28, 0x01	; 1
  fa:	f8 01       	movw	r30, r16
  fc:	ec 0f       	add	r30, r28
  fe:	fd 1f       	adc	r31, r29
 100:	80 81       	ld	r24, Z
 102:	81 11       	cpse	r24, r1
 104:	ee cf       	rjmp	.-36     	; 0xe2 <lcd_str+0x10>
	{
		lcd_char(str[i]);
		_delay_ms(100);
	}
}
 106:	df 91       	pop	r29
 108:	cf 91       	pop	r28
 10a:	1f 91       	pop	r17
 10c:	0f 91       	pop	r16
 10e:	08 95       	ret

00000110 <lcd_init>:

void lcd_init ()
{
	DDRD=255;//data
 110:	8f ef       	ldi	r24, 0xFF	; 255
 112:	81 bb       	out	0x11, r24	; 17
	DDRC|=(1<<rs)|(1<<e)|(1<<rw);
 114:	84 b3       	in	r24, 0x14	; 20
 116:	87 60       	ori	r24, 0x07	; 7
 118:	84 bb       	out	0x14, r24	; 20
 11a:	8f e3       	ldi	r24, 0x3F	; 63
 11c:	9c e9       	ldi	r25, 0x9C	; 156
 11e:	01 97       	sbiw	r24, 0x01	; 1
 120:	f1 f7       	brne	.-4      	; 0x11e <lcd_init+0xe>
 122:	00 c0       	rjmp	.+0      	; 0x124 <lcd_init+0x14>
 124:	00 00       	nop
	_delay_ms(20);
lcd_cmd(0x38);//1 char 1 digit
 126:	88 e3       	ldi	r24, 0x38	; 56
 128:	0e 94 41 00 	call	0x82	; 0x82 <lcd_cmd>
lcd_cmd(0x0E);// display & cursor ON
 12c:	8e e0       	ldi	r24, 0x0E	; 14
 12e:	0e 94 41 00 	call	0x82	; 0x82 <lcd_cmd>
lcd_cmd(0x01);//clear
 132:	81 e0       	ldi	r24, 0x01	; 1
 134:	0e 94 41 00 	call	0x82	; 0x82 <lcd_cmd>
 138:	8f ec       	ldi	r24, 0xCF	; 207
 13a:	97 e0       	ldi	r25, 0x07	; 7
 13c:	01 97       	sbiw	r24, 0x01	; 1
 13e:	f1 f7       	brne	.-4      	; 0x13c <lcd_init+0x2c>
 140:	00 c0       	rjmp	.+0      	; 0x142 <lcd_init+0x32>
 142:	00 00       	nop
 144:	08 95       	ret

00000146 <readKeypad>:
{
	while(1)
	{
		// Loop through the columns
		
		for (int col = 0; col < 4; col++)
 146:	40 e0       	ldi	r20, 0x00	; 0
 148:	50 e0       	ldi	r21, 0x00	; 0
 14a:	37 c0       	rjmp	.+110    	; 0x1ba <readKeypad+0x74>
		{
			// Set data direction for columns and activate a single column
			KEYPAD_DDR = KEYPAD_COL_MASK;
 14c:	80 ef       	ldi	r24, 0xF0	; 240
 14e:	8a bb       	out	0x1a, r24	; 26
			KEYPAD_PORT = ~(1 << (col + 4));  // Shift to the correct column position
 150:	9a 01       	movw	r18, r20
 152:	2c 5f       	subi	r18, 0xFC	; 252
 154:	3f 4f       	sbci	r19, 0xFF	; 255
 156:	81 e0       	ldi	r24, 0x01	; 1
 158:	90 e0       	ldi	r25, 0x00	; 0
 15a:	02 c0       	rjmp	.+4      	; 0x160 <readKeypad+0x1a>
 15c:	88 0f       	add	r24, r24
 15e:	99 1f       	adc	r25, r25
 160:	2a 95       	dec	r18
 162:	e2 f7       	brpl	.-8      	; 0x15c <readKeypad+0x16>
 164:	80 95       	com	r24
 166:	8b bb       	out	0x1b, r24	; 27
			
			// Check each row for a pressed key
			for (int row = 0; row < 4; row++)
 168:	20 e0       	ldi	r18, 0x00	; 0
 16a:	30 e0       	ldi	r19, 0x00	; 0
 16c:	21 c0       	rjmp	.+66     	; 0x1b0 <readKeypad+0x6a>
			{
				// If a key is pressed in the current row
				if (!(KEYPAD_PIN & (1 << row)))
 16e:	89 b3       	in	r24, 0x19	; 25
 170:	90 e0       	ldi	r25, 0x00	; 0
 172:	02 2e       	mov	r0, r18
 174:	02 c0       	rjmp	.+4      	; 0x17a <readKeypad+0x34>
 176:	95 95       	asr	r25
 178:	87 95       	ror	r24
 17a:	0a 94       	dec	r0
 17c:	e2 f7       	brpl	.-8      	; 0x176 <readKeypad+0x30>
 17e:	80 fd       	sbrc	r24, 0
 180:	15 c0       	rjmp	.+42     	; 0x1ac <readKeypad+0x66>
				{
					// Wait for key release
					while (!(KEYPAD_PIN & (1 << row)));
 182:	89 b3       	in	r24, 0x19	; 25
 184:	90 e0       	ldi	r25, 0x00	; 0
 186:	02 2e       	mov	r0, r18
 188:	02 c0       	rjmp	.+4      	; 0x18e <readKeypad+0x48>
 18a:	95 95       	asr	r25
 18c:	87 95       	ror	r24
 18e:	0a 94       	dec	r0
 190:	e2 f7       	brpl	.-8      	; 0x18a <readKeypad+0x44>
 192:	80 ff       	sbrs	r24, 0
 194:	f6 cf       	rjmp	.-20     	; 0x182 <readKeypad+0x3c>
					// Return the corresponding character from the keypad matrix
					return keypad[row][col];
 196:	22 0f       	add	r18, r18
 198:	33 1f       	adc	r19, r19
 19a:	22 0f       	add	r18, r18
 19c:	33 1f       	adc	r19, r19
 19e:	24 55       	subi	r18, 0x54	; 84
 1a0:	3f 4f       	sbci	r19, 0xFF	; 255
 1a2:	f9 01       	movw	r30, r18
 1a4:	e4 0f       	add	r30, r20
 1a6:	f5 1f       	adc	r31, r21
 1a8:	80 81       	ld	r24, Z
 1aa:	08 95       	ret
			// Set data direction for columns and activate a single column
			KEYPAD_DDR = KEYPAD_COL_MASK;
			KEYPAD_PORT = ~(1 << (col + 4));  // Shift to the correct column position
			
			// Check each row for a pressed key
			for (int row = 0; row < 4; row++)
 1ac:	2f 5f       	subi	r18, 0xFF	; 255
 1ae:	3f 4f       	sbci	r19, 0xFF	; 255
 1b0:	24 30       	cpi	r18, 0x04	; 4
 1b2:	31 05       	cpc	r19, r1
 1b4:	e4 f2       	brlt	.-72     	; 0x16e <readKeypad+0x28>
{
	while(1)
	{
		// Loop through the columns
		
		for (int col = 0; col < 4; col++)
 1b6:	4f 5f       	subi	r20, 0xFF	; 255
 1b8:	5f 4f       	sbci	r21, 0xFF	; 255
 1ba:	44 30       	cpi	r20, 0x04	; 4
 1bc:	51 05       	cpc	r21, r1
 1be:	34 f2       	brlt	.-116    	; 0x14c <readKeypad+0x6>
 1c0:	c2 cf       	rjmp	.-124    	; 0x146 <readKeypad>

000001c2 <keypad_scan>:
	return 0;  // This line should technically never be reached
}

// Function to scan the keypad and return the pressed key
char keypad_scan()
{
 1c2:	cf 93       	push	r28
	char key = readKeypad();  // Read the pressed key
 1c4:	0e 94 a3 00 	call	0x146	; 0x146 <readKeypad>
 1c8:	c8 2f       	mov	r28, r24
	if (key != 0)
 1ca:	81 11       	cpse	r24, r1
	{
		// Display the pressed key on the LCD (assuming LCD_DISPLAY_CHAR is defined elsewhere)
		lcd_char(key);
 1cc:	0e 94 55 00 	call	0xaa	; 0xaa <lcd_char>
	}
	
	return key;  // Return the pressed key
}
 1d0:	8c 2f       	mov	r24, r28
 1d2:	cf 91       	pop	r28
 1d4:	08 95       	ret

000001d6 <enter>:
	{"0001", "1111", "john"},
	{"0002", "2222", "Rito"},
	{"0003", "3333", "rahaf"},
	{"0004", "4444", "tifa"}
};
char enter(char get[]){
 1d6:	0f 93       	push	r16
 1d8:	1f 93       	push	r17
 1da:	cf 93       	push	r28
 1dc:	8c 01       	movw	r16, r24
	char i=0;
 1de:	c0 e0       	ldi	r28, 0x00	; 0
	while(1){
		char ch=keypad_scan();
 1e0:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <keypad_scan>
		get[i]=ch;
 1e4:	f8 01       	movw	r30, r16
 1e6:	ec 0f       	add	r30, r28
 1e8:	f1 1d       	adc	r31, r1
 1ea:	80 83       	st	Z, r24
		i++;
 1ec:	cf 5f       	subi	r28, 0xFF	; 255
		if (i>=4){
 1ee:	c4 30       	cpi	r28, 0x04	; 4
 1f0:	b8 f3       	brcs	.-18     	; 0x1e0 <enter+0xa>
			get[i] = '\0';
 1f2:	f8 01       	movw	r30, r16
 1f4:	ec 0f       	add	r30, r28
 1f6:	f1 1d       	adc	r31, r1
 1f8:	10 82       	st	Z, r1
			break;
		}
	}
}
 1fa:	cf 91       	pop	r28
 1fc:	1f 91       	pop	r17
 1fe:	0f 91       	pop	r16
 200:	08 95       	ret

00000202 <check_id>:

char check_id(char getid[]) {
 202:	bc 01       	movw	r22, r24
	char i=0;
 204:	90 e0       	ldi	r25, 0x00	; 0
	for (; i < 4; i++) {
 206:	20 c0       	rjmp	.+64     	; 0x248 <check_id+0x46>
		int match = 1;
		for (int j = 0;j<4; j++) {
			if (getid[j] != users[i].id[j]) {
 208:	fb 01       	movw	r30, r22
 20a:	e2 0f       	add	r30, r18
 20c:	f3 1f       	adc	r31, r19
 20e:	50 81       	ld	r21, Z
 210:	83 e1       	ldi	r24, 0x13	; 19
 212:	98 9f       	mul	r25, r24
 214:	f0 01       	movw	r30, r0
 216:	11 24       	eor	r1, r1
 218:	e0 5a       	subi	r30, 0xA0	; 160
 21a:	ff 4f       	sbci	r31, 0xFF	; 255
 21c:	e2 0f       	add	r30, r18
 21e:	f3 1f       	adc	r31, r19
 220:	40 81       	ld	r20, Z
 222:	54 13       	cpse	r21, r20
 224:	0b c0       	rjmp	.+22     	; 0x23c <check_id+0x3a>

char check_id(char getid[]) {
	char i=0;
	for (; i < 4; i++) {
		int match = 1;
		for (int j = 0;j<4; j++) {
 226:	2f 5f       	subi	r18, 0xFF	; 255
 228:	3f 4f       	sbci	r19, 0xFF	; 255
 22a:	02 c0       	rjmp	.+4      	; 0x230 <check_id+0x2e>
 22c:	20 e0       	ldi	r18, 0x00	; 0
 22e:	30 e0       	ldi	r19, 0x00	; 0
 230:	24 30       	cpi	r18, 0x04	; 4
 232:	31 05       	cpc	r19, r1
 234:	4c f3       	brlt	.-46     	; 0x208 <check_id+0x6>
}

char check_id(char getid[]) {
	char i=0;
	for (; i < 4; i++) {
		int match = 1;
 236:	21 e0       	ldi	r18, 0x01	; 1
 238:	30 e0       	ldi	r19, 0x00	; 0
 23a:	02 c0       	rjmp	.+4      	; 0x240 <check_id+0x3e>
		for (int j = 0;j<4; j++) {
			if (getid[j] != users[i].id[j]) {
				match = 0;
 23c:	20 e0       	ldi	r18, 0x00	; 0
 23e:	30 e0       	ldi	r19, 0x00	; 0
				break;
			}
		}
		if (match==1){
 240:	21 30       	cpi	r18, 0x01	; 1
 242:	31 05       	cpc	r19, r1
 244:	61 f0       	breq	.+24     	; 0x25e <check_id+0x5c>
	}
}

char check_id(char getid[]) {
	char i=0;
	for (; i < 4; i++) {
 246:	9f 5f       	subi	r25, 0xFF	; 255
 248:	94 30       	cpi	r25, 0x04	; 4
 24a:	80 f3       	brcs	.-32     	; 0x22c <check_id+0x2a>
		}
		if (match==1){
			return i ;
		}
	}
			lcd_cmd(0xC0);
 24c:	80 ec       	ldi	r24, 0xC0	; 192
 24e:	0e 94 41 00 	call	0x82	; 0x82 <lcd_cmd>
			lcd_str("wrong ID");
 252:	8c eb       	ldi	r24, 0xBC	; 188
 254:	90 e0       	ldi	r25, 0x00	; 0
 256:	0e 94 69 00 	call	0xd2	; 0xd2 <lcd_str>
			return 'w';
 25a:	87 e7       	ldi	r24, 0x77	; 119
 25c:	08 95       	ret
				match = 0;
				break;
			}
		}
		if (match==1){
			return i ;
 25e:	89 2f       	mov	r24, r25
		}
	}
			lcd_cmd(0xC0);
			lcd_str("wrong ID");
			return 'w';
}
 260:	08 95       	ret

00000262 <check_pass>:
char check_pass(char getpass[],char usernum) {
 262:	dc 01       	movw	r26, r24
		char match = '1';
		for (int i = 0;i<4; i++) {
 264:	20 e0       	ldi	r18, 0x00	; 0
 266:	30 e0       	ldi	r19, 0x00	; 0
 268:	11 c0       	rjmp	.+34     	; 0x28c <check_pass+0x2a>
			if (getpass[i] != users[usernum].pass[i]) {
 26a:	fd 01       	movw	r30, r26
 26c:	e2 0f       	add	r30, r18
 26e:	f3 1f       	adc	r31, r19
 270:	40 81       	ld	r20, Z
 272:	83 e1       	ldi	r24, 0x13	; 19
 274:	68 9f       	mul	r22, r24
 276:	f0 01       	movw	r30, r0
 278:	11 24       	eor	r1, r1
 27a:	e0 5a       	subi	r30, 0xA0	; 160
 27c:	ff 4f       	sbci	r31, 0xFF	; 255
 27e:	e2 0f       	add	r30, r18
 280:	f3 1f       	adc	r31, r19
 282:	95 81       	ldd	r25, Z+5	; 0x05
 284:	49 13       	cpse	r20, r25
 286:	07 c0       	rjmp	.+14     	; 0x296 <check_pass+0x34>
			lcd_str("wrong ID");
			return 'w';
}
char check_pass(char getpass[],char usernum) {
		char match = '1';
		for (int i = 0;i<4; i++) {
 288:	2f 5f       	subi	r18, 0xFF	; 255
 28a:	3f 4f       	sbci	r19, 0xFF	; 255
 28c:	24 30       	cpi	r18, 0x04	; 4
 28e:	31 05       	cpc	r19, r1
 290:	64 f3       	brlt	.-40     	; 0x26a <check_pass+0x8>
			lcd_cmd(0xC0);
			lcd_str("wrong ID");
			return 'w';
}
char check_pass(char getpass[],char usernum) {
		char match = '1';
 292:	81 e3       	ldi	r24, 0x31	; 49
 294:	08 95       	ret
		for (int i = 0;i<4; i++) {
			if (getpass[i] != users[usernum].pass[i]) {
				match = '0';
 296:	80 e3       	ldi	r24, 0x30	; 48
				break;
			}
		}
			return match ;
	}
 298:	08 95       	ret

0000029a <toggle>:
void toggle(char pin){
	PORTB^=1<<pin;
 29a:	48 b3       	in	r20, 0x18	; 24
 29c:	21 e0       	ldi	r18, 0x01	; 1
 29e:	30 e0       	ldi	r19, 0x00	; 0
 2a0:	b9 01       	movw	r22, r18
 2a2:	02 c0       	rjmp	.+4      	; 0x2a8 <toggle+0xe>
 2a4:	66 0f       	add	r22, r22
 2a6:	77 1f       	adc	r23, r23
 2a8:	8a 95       	dec	r24
 2aa:	e2 f7       	brpl	.-8      	; 0x2a4 <toggle+0xa>
 2ac:	cb 01       	movw	r24, r22
 2ae:	46 27       	eor	r20, r22
 2b0:	48 bb       	out	0x18, r20	; 24
 2b2:	7f ef       	ldi	r23, 0xFF	; 255
 2b4:	21 ee       	ldi	r18, 0xE1	; 225
 2b6:	34 e0       	ldi	r19, 0x04	; 4
 2b8:	71 50       	subi	r23, 0x01	; 1
 2ba:	20 40       	sbci	r18, 0x00	; 0
 2bc:	30 40       	sbci	r19, 0x00	; 0
 2be:	e1 f7       	brne	.-8      	; 0x2b8 <toggle+0x1e>
 2c0:	00 c0       	rjmp	.+0      	; 0x2c2 <toggle+0x28>
 2c2:	00 00       	nop
	_delay_ms(200);
	PORTB^=1<<pin;
 2c4:	98 b3       	in	r25, 0x18	; 24
 2c6:	98 27       	eor	r25, r24
 2c8:	98 bb       	out	0x18, r25	; 24
 2ca:	4f ef       	ldi	r20, 0xFF	; 255
 2cc:	61 ee       	ldi	r22, 0xE1	; 225
 2ce:	74 e0       	ldi	r23, 0x04	; 4
 2d0:	41 50       	subi	r20, 0x01	; 1
 2d2:	60 40       	sbci	r22, 0x00	; 0
 2d4:	70 40       	sbci	r23, 0x00	; 0
 2d6:	e1 f7       	brne	.-8      	; 0x2d0 <toggle+0x36>
 2d8:	00 c0       	rjmp	.+0      	; 0x2da <toggle+0x40>
 2da:	00 00       	nop
	_delay_ms(200);
	PORTB^=1<<pin;
 2dc:	98 b3       	in	r25, 0x18	; 24
 2de:	98 27       	eor	r25, r24
 2e0:	98 bb       	out	0x18, r25	; 24
 2e2:	2f ef       	ldi	r18, 0xFF	; 255
 2e4:	31 ee       	ldi	r19, 0xE1	; 225
 2e6:	44 e0       	ldi	r20, 0x04	; 4
 2e8:	21 50       	subi	r18, 0x01	; 1
 2ea:	30 40       	sbci	r19, 0x00	; 0
 2ec:	40 40       	sbci	r20, 0x00	; 0
 2ee:	e1 f7       	brne	.-8      	; 0x2e8 <toggle+0x4e>
 2f0:	00 c0       	rjmp	.+0      	; 0x2f2 <toggle+0x58>
 2f2:	00 00       	nop
	_delay_ms(200);
	PORTB^=1<<pin;
 2f4:	98 b3       	in	r25, 0x18	; 24
 2f6:	98 27       	eor	r25, r24
 2f8:	98 bb       	out	0x18, r25	; 24
 2fa:	6f ef       	ldi	r22, 0xFF	; 255
 2fc:	71 ee       	ldi	r23, 0xE1	; 225
 2fe:	24 e0       	ldi	r18, 0x04	; 4
 300:	61 50       	subi	r22, 0x01	; 1
 302:	70 40       	sbci	r23, 0x00	; 0
 304:	20 40       	sbci	r18, 0x00	; 0
 306:	e1 f7       	brne	.-8      	; 0x300 <toggle+0x66>
 308:	00 c0       	rjmp	.+0      	; 0x30a <toggle+0x70>
 30a:	00 00       	nop
	_delay_ms(200);
	PORTB^=1<<pin;
 30c:	98 b3       	in	r25, 0x18	; 24
 30e:	98 27       	eor	r25, r24
 310:	98 bb       	out	0x18, r25	; 24
 312:	3f ef       	ldi	r19, 0xFF	; 255
 314:	41 ee       	ldi	r20, 0xE1	; 225
 316:	64 e0       	ldi	r22, 0x04	; 4
 318:	31 50       	subi	r19, 0x01	; 1
 31a:	40 40       	sbci	r20, 0x00	; 0
 31c:	60 40       	sbci	r22, 0x00	; 0
 31e:	e1 f7       	brne	.-8      	; 0x318 <toggle+0x7e>
 320:	00 c0       	rjmp	.+0      	; 0x322 <toggle+0x88>
 322:	00 00       	nop
	_delay_ms(200);
	PORTB^=1<<pin;
 324:	98 b3       	in	r25, 0x18	; 24
 326:	89 27       	eor	r24, r25
 328:	88 bb       	out	0x18, r24	; 24
 32a:	7f ef       	ldi	r23, 0xFF	; 255
 32c:	81 ee       	ldi	r24, 0xE1	; 225
 32e:	94 e0       	ldi	r25, 0x04	; 4
 330:	71 50       	subi	r23, 0x01	; 1
 332:	80 40       	sbci	r24, 0x00	; 0
 334:	90 40       	sbci	r25, 0x00	; 0
 336:	e1 f7       	brne	.-8      	; 0x330 <toggle+0x96>
 338:	00 c0       	rjmp	.+0      	; 0x33a <toggle+0xa0>
 33a:	00 00       	nop
 33c:	08 95       	ret

0000033e <main>:
	_delay_ms(200);
}
int main(void){
 33e:	cf 93       	push	r28
 340:	df 93       	push	r29
 342:	cd b7       	in	r28, 0x3d	; 61
 344:	de b7       	in	r29, 0x3e	; 62
 346:	2a 97       	sbiw	r28, 0x0a	; 10
 348:	0f b6       	in	r0, 0x3f	; 63
 34a:	f8 94       	cli
 34c:	de bf       	out	0x3e, r29	; 62
 34e:	0f be       	out	0x3f, r0	; 63
 350:	cd bf       	out	0x3d, r28	; 61
	lcd_init();
 352:	0e 94 88 00 	call	0x110	; 0x110 <lcd_init>
	DDRB=0xff;
 356:	8f ef       	ldi	r24, 0xFF	; 255
 358:	87 bb       	out	0x17, r24	; 23
	while (1){
		PORTB|=1<<2;
 35a:	88 b3       	in	r24, 0x18	; 24
 35c:	84 60       	ori	r24, 0x04	; 4
 35e:	88 bb       	out	0x18, r24	; 24
		PORTB&=~(1<<3);
 360:	88 b3       	in	r24, 0x18	; 24
 362:	87 7f       	andi	r24, 0xF7	; 247
 364:	88 bb       	out	0x18, r24	; 24
		PORTB&=~(1<<0);
 366:	88 b3       	in	r24, 0x18	; 24
 368:	8e 7f       	andi	r24, 0xFE	; 254
 36a:	88 bb       	out	0x18, r24	; 24
		PORTB&=~(1<<1);
 36c:	88 b3       	in	r24, 0x18	; 24
 36e:	8d 7f       	andi	r24, 0xFD	; 253
 370:	88 bb       	out	0x18, r24	; 24
		char getid[5];
		lcd_cmd(0x80);
 372:	80 e8       	ldi	r24, 0x80	; 128
 374:	0e 94 41 00 	call	0x82	; 0x82 <lcd_cmd>
		lcd_str("ID :");
 378:	85 ec       	ldi	r24, 0xC5	; 197
 37a:	90 e0       	ldi	r25, 0x00	; 0
 37c:	0e 94 69 00 	call	0xd2	; 0xd2 <lcd_str>
		enter(getid);
 380:	ce 01       	movw	r24, r28
 382:	06 96       	adiw	r24, 0x06	; 6
 384:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <enter>
		char usernum= check_id(getid);
 388:	ce 01       	movw	r24, r28
 38a:	06 96       	adiw	r24, 0x06	; 6
 38c:	0e 94 01 01 	call	0x202	; 0x202 <check_id>
 390:	18 2f       	mov	r17, r24
		if (usernum != 'w'){
 392:	87 37       	cpi	r24, 0x77	; 119
 394:	09 f4       	brne	.+2      	; 0x398 <main+0x5a>
 396:	7d c0       	rjmp	.+250    	; 0x492 <__EEPROM_REGION_LENGTH__+0x92>
 398:	2f ef       	ldi	r18, 0xFF	; 255
 39a:	39 e6       	ldi	r19, 0x69	; 105
 39c:	88 e1       	ldi	r24, 0x18	; 24
 39e:	21 50       	subi	r18, 0x01	; 1
 3a0:	30 40       	sbci	r19, 0x00	; 0
 3a2:	80 40       	sbci	r24, 0x00	; 0
 3a4:	e1 f7       	brne	.-8      	; 0x39e <main+0x60>
 3a6:	00 c0       	rjmp	.+0      	; 0x3a8 <main+0x6a>
 3a8:	00 00       	nop
			_delay_ms(1000);
			lcd_cmd(0x01);
 3aa:	81 e0       	ldi	r24, 0x01	; 1
 3ac:	0e 94 41 00 	call	0x82	; 0x82 <lcd_cmd>
			char getpass[5];
			lcd_cmd(0x80);
 3b0:	80 e8       	ldi	r24, 0x80	; 128
 3b2:	0e 94 41 00 	call	0x82	; 0x82 <lcd_cmd>
			lcd_str("password :");
 3b6:	8a ec       	ldi	r24, 0xCA	; 202
 3b8:	90 e0       	ldi	r25, 0x00	; 0
 3ba:	0e 94 69 00 	call	0xd2	; 0xd2 <lcd_str>
			enter(getpass);
 3be:	ce 01       	movw	r24, r28
 3c0:	01 96       	adiw	r24, 0x01	; 1
 3c2:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <enter>
			char checkpass = check_pass(getpass,usernum);
 3c6:	61 2f       	mov	r22, r17
 3c8:	ce 01       	movw	r24, r28
 3ca:	01 96       	adiw	r24, 0x01	; 1
 3cc:	0e 94 31 01 	call	0x262	; 0x262 <check_pass>
				if (checkpass == '0'){
 3d0:	80 33       	cpi	r24, 0x30	; 48
 3d2:	71 f4       	brne	.+28     	; 0x3f0 <main+0xb2>
					lcd_cmd(0xC0);
 3d4:	80 ec       	ldi	r24, 0xC0	; 192
 3d6:	0e 94 41 00 	call	0x82	; 0x82 <lcd_cmd>
					lcd_str("wrong password");
 3da:	85 ed       	ldi	r24, 0xD5	; 213
 3dc:	90 e0       	ldi	r25, 0x00	; 0
 3de:	0e 94 69 00 	call	0xd2	; 0xd2 <lcd_str>
					toggle(2);
 3e2:	82 e0       	ldi	r24, 0x02	; 2
 3e4:	0e 94 4d 01 	call	0x29a	; 0x29a <toggle>
					lcd_cmd(0x01);
 3e8:	81 e0       	ldi	r24, 0x01	; 1
 3ea:	0e 94 41 00 	call	0x82	; 0x82 <lcd_cmd>
 3ee:	b5 cf       	rjmp	.-150    	; 0x35a <main+0x1c>
				}else{
					lcd_cmd(0xC0);
 3f0:	80 ec       	ldi	r24, 0xC0	; 192
 3f2:	0e 94 41 00 	call	0x82	; 0x82 <lcd_cmd>
					lcd_str("welcome !");
 3f6:	84 ee       	ldi	r24, 0xE4	; 228
 3f8:	90 e0       	ldi	r25, 0x00	; 0
 3fa:	0e 94 69 00 	call	0xd2	; 0xd2 <lcd_str>
 3fe:	9f e7       	ldi	r25, 0x7F	; 127
 400:	2a e1       	ldi	r18, 0x1A	; 26
 402:	36 e0       	ldi	r19, 0x06	; 6
 404:	91 50       	subi	r25, 0x01	; 1
 406:	20 40       	sbci	r18, 0x00	; 0
 408:	30 40       	sbci	r19, 0x00	; 0
 40a:	e1 f7       	brne	.-8      	; 0x404 <__EEPROM_REGION_LENGTH__+0x4>
 40c:	00 c0       	rjmp	.+0      	; 0x40e <__EEPROM_REGION_LENGTH__+0xe>
 40e:	00 00       	nop
					_delay_ms(250);
					lcd_cmd(0x01);
 410:	81 e0       	ldi	r24, 0x01	; 1
 412:	0e 94 41 00 	call	0x82	; 0x82 <lcd_cmd>
					lcd_cmd(0x80);
 416:	80 e8       	ldi	r24, 0x80	; 128
 418:	0e 94 41 00 	call	0x82	; 0x82 <lcd_cmd>
					lcd_str("Hello ");
 41c:	8e ee       	ldi	r24, 0xEE	; 238
 41e:	90 e0       	ldi	r25, 0x00	; 0
 420:	0e 94 69 00 	call	0xd2	; 0xd2 <lcd_str>
					lcd_str(users[usernum].name);
 424:	23 e1       	ldi	r18, 0x13	; 19
 426:	12 9f       	mul	r17, r18
 428:	c0 01       	movw	r24, r0
 42a:	11 24       	eor	r1, r1
 42c:	86 59       	subi	r24, 0x96	; 150
 42e:	9f 4f       	sbci	r25, 0xFF	; 255
 430:	0e 94 69 00 	call	0xd2	; 0xd2 <lcd_str>
					PORTB^=1<<2;
 434:	98 b3       	in	r25, 0x18	; 24
 436:	84 e0       	ldi	r24, 0x04	; 4
 438:	89 27       	eor	r24, r25
 43a:	88 bb       	out	0x18, r24	; 24
					PORTB^=1<<3;
 43c:	98 b3       	in	r25, 0x18	; 24
 43e:	88 e0       	ldi	r24, 0x08	; 8
 440:	89 27       	eor	r24, r25
 442:	88 bb       	out	0x18, r24	; 24
					
					PORTB^=1<<0;
 444:	88 b3       	in	r24, 0x18	; 24
 446:	11 e0       	ldi	r17, 0x01	; 1
 448:	81 27       	eor	r24, r17
 44a:	88 bb       	out	0x18, r24	; 24
					toggle(3);
 44c:	83 e0       	ldi	r24, 0x03	; 3
 44e:	0e 94 4d 01 	call	0x29a	; 0x29a <toggle>
 452:	3f ef       	ldi	r19, 0xFF	; 255
 454:	88 e0       	ldi	r24, 0x08	; 8
 456:	9d e3       	ldi	r25, 0x3D	; 61
 458:	31 50       	subi	r19, 0x01	; 1
 45a:	80 40       	sbci	r24, 0x00	; 0
 45c:	90 40       	sbci	r25, 0x00	; 0
 45e:	e1 f7       	brne	.-8      	; 0x458 <__EEPROM_REGION_LENGTH__+0x58>
 460:	00 c0       	rjmp	.+0      	; 0x462 <__EEPROM_REGION_LENGTH__+0x62>
 462:	00 00       	nop
					_delay_ms(2500);
					PORTB^=1<<0;
 464:	88 b3       	in	r24, 0x18	; 24
 466:	18 27       	eor	r17, r24
 468:	18 bb       	out	0x18, r17	; 24
					PORTB^=1<<1;
 46a:	98 b3       	in	r25, 0x18	; 24
 46c:	82 e0       	ldi	r24, 0x02	; 2
 46e:	98 27       	eor	r25, r24
 470:	98 bb       	out	0x18, r25	; 24
 472:	2f ef       	ldi	r18, 0xFF	; 255
 474:	38 e0       	ldi	r19, 0x08	; 8
 476:	9d e3       	ldi	r25, 0x3D	; 61
 478:	21 50       	subi	r18, 0x01	; 1
 47a:	30 40       	sbci	r19, 0x00	; 0
 47c:	90 40       	sbci	r25, 0x00	; 0
 47e:	e1 f7       	brne	.-8      	; 0x478 <__EEPROM_REGION_LENGTH__+0x78>
 480:	00 c0       	rjmp	.+0      	; 0x482 <__EEPROM_REGION_LENGTH__+0x82>
 482:	00 00       	nop
					_delay_ms(2500);
					PORTB^=1<<1;
 484:	98 b3       	in	r25, 0x18	; 24
 486:	89 27       	eor	r24, r25
 488:	88 bb       	out	0x18, r24	; 24
					lcd_cmd(0x01);
 48a:	81 e0       	ldi	r24, 0x01	; 1
 48c:	0e 94 41 00 	call	0x82	; 0x82 <lcd_cmd>
 490:	64 cf       	rjmp	.-312    	; 0x35a <main+0x1c>
				}
		}else{
			toggle(2);
 492:	82 e0       	ldi	r24, 0x02	; 2
 494:	0e 94 4d 01 	call	0x29a	; 0x29a <toggle>
			lcd_cmd(0x01);
 498:	81 e0       	ldi	r24, 0x01	; 1
 49a:	0e 94 41 00 	call	0x82	; 0x82 <lcd_cmd>
		}
    }
 49e:	5d cf       	rjmp	.-326    	; 0x35a <main+0x1c>

000004a0 <_exit>:
 4a0:	f8 94       	cli

000004a2 <__stop_program>:
 4a2:	ff cf       	rjmp	.-2      	; 0x4a2 <__stop_program>
